<<<<<<< HEAD
Clase 1 - Teorica
=======
﻿Clase 1 - Teorica
>>>>>>> cd0efa4e904fcdf5ef0964a3c7e431d9d658783c

Introduccion al concepto de programacion orientada a objetos.

Paradigmas:
1)Foco en instrucciones: a)procedural y b)orientado a objetos
2)Foco en expresiones: a) logica y b)funcional

Objetos => tener datos y funciones en la misma entidad. Paradigma de programacion orienta a objetos.
procedural => tener datos y funciones por separados. los datos son pasivos y se les aplican procesos

POO:
objetos actuan para resolver problemas (no son datos pasivos), respondiendo a estimulos del medio externo. Los objetos se llaman entre si hasta resolver el problema.

Objeto (Carlos Fontela)=> una entidad con comportamiento. Identidad (diferencia entre 2 objetos de las mismas caracteristicas)+ estado (datos o atributos) + comportamiento (metodos o funciones. Son reacciones ante mensajes recibidos y acciones que representan mensajes en otro objeto. Ejecutar un metodo es un msj a otro objeto, si es que interactua con otro.).
clases = plantillas para construir objetos. Hay lenguajes que no tienen clases, tienen prototipos. java tiene clases

Diseño de soluciones:
1. Encontrar objetos.

Modelar la realidad. Objetos son abstracciones de la realidad. No se utilizan datos irrelevantes de la realidad en el programa al diseñar un objeto.

2. Determinar mensajes.

3. Implementar comportamiento de objetos.
Clases: conjuntos de objetos con el mismo comportamiento (entienden los mismos mensajes y responden de la misma manera).
Cuando la poo es con clases, en la definicion de la clase se define el comportamiento. Un objeto es un caso particular de una clase.

UML: diagrama de secuencia.

Son modelos dinamicos que describen como varios objetos interactuan entre si en el tiempo.
Objetos: representados horizontalmente como rectangulos separados. Debajo de ellos se dibuja una linea de vida que representa como se deberian generar las interacciones (metodos/mensajes) a lo largo del programa.
Mensajes: flechas entre objetos. El orden de los mensajes esta dado por la linea de vida, se lee de arriba hacia abajo. Se denota con el nombre de la funcion, quizas parametros. Tambien se denota si se actualiza el atributo de un objeto.
Se pueden representar flujos de ejecucion mas complejos (iteraciones, condiciones).

Principio de diseño basico: tell, dont ask!
no solicitarle un objeto que indique su estado para despues hacer una accion basandose en este. Lo correcto es solicitarle al mimso objeto que lo haga.
Es decir, definirle un comportamiento para que el mimso lo haga.
Ocultar la implementacion, solo pedir acciones a objetos.

PlantUML.

Principio de diseño basico: less is more. Subdividir diagramas.

Diagrmas de secuencia (conclusiones iniciales):
Visualiza el flujo de control y orden temporal de eventos.
Ayuda a encontrar metodos necesarios de objetos (no todos).
Conviene colocar a la izquierda objetos mas importantes, que inician interacciones.
Diagrama=> SIMPLE.

Como subdividir diagramas?

tipos de diagramas:
<<<<<<< HEAD
1. diagrmas de interaccion.
=======
1. diagramas de interaccion.
>>>>>>> cd0efa4e904fcdf5ef0964a3c7e431d9d658783c
Permite encapsular el diagrama que representa la interaccion entre 2 o mas objetos (cercanos en el diagrama principal, si estan lejos es complejo a nivel practico). Esdecir, metodos que solicitan cosas a otros objetos.

2. diagramas de clases.
Representan relaciones estaticas entre clases e interfaces (no cambian).
Se representa el nombre de la clase, atributos y metodos.

Relaciones entre clases/interfaces: 
a. Asociacion (tiene). Flecha. Profesor tiene un curso.
b. Agregacion (tienen distintos ciclos de vida). Flecha con origen rombo vacio. Objeto tiene otros objetos pero si el primer objeto desaparece, los objetos que lo componian NO DESAPARECEN, son independientes.
c. Composicion (tienen el mismo ciclo de vida). Flecha con origen rombo lleno. Ej: ventana nace con botones. Si se borra la ventana, se borran los botones.
d. Generalizacion (es). Flecha con V de destino vacia. Subclases.  Herencia.
e. Realizacion (implementa). Flecha delineada con V de destino vacia. Clase que necesita implementar una interfaz. Se hace en otro archivo, no dentro de la clase. Profundizar.
f. Depedencia (usa). Flecha delineada con V de destino llena. Clase que usa dentro de sus metodos metodos de otras clases. Ej: clase calculadora usa biblioteca de funciones.
 
<<<<<<< HEAD
=======

Multiplicidad de relaciones entre clases:
1 - uno
0..1 / * - cero o uno
0..* - cero o muchos
1..* - uno o muchos



>>>>>>> cd0efa4e904fcdf5ef0964a3c7e431d9d658783c
Conclusiones de diagrama de clases:
No es necesario representar todas las clases.
No es necesario representar todas las relaciones.
Modelar partes importantes.

